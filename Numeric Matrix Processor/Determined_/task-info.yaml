type: edu
custom_name: Determined!
files:
- name: src/processor/Main.java
  visible: true
  text: |
    package processor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    import static java.lang.Math.abs;


    class TestClue {

        String feedback;
        ArrayList<Double> answers;

        TestClue(String feedback, Double[] answers) {
            this.feedback = feedback;
            this.answers = new ArrayList<>(Arrays.asList(answers));
        }
    }

    public class NumericMatrixProcessorTest extends StageTest<TestClue> {



        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            7d, 13d, 132d,
                            17d, 23d, 45d,
                            65d, 57d, 78d
                        }))
                    .setInput(
                        "1\n"+
                            "3 3\n" +
                            "3 4 55\n" +
                            "4 1 1\n" +
                            "9 0 0\n" +
                            "3 3\n" +
                            "4 9 77\n" +
                            "13 22 44\n" +
                            "56 57 78\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            43.13d, 911.62d, 1311.8d, 136.53d,
                            -4.2d, 141.1d, -1.09d, 1421.6d,
                            230.33d, 114.2d, 100.7d, 990.4d,
                            956.72d, 168.94d, 112.16d, 27.0d
                        }))
                    .setInput(
                        "1\n"+
                            "4 4\n" +
                            "-0.3 677.4 435.2 123.33\n" +
                            "1.3 141.4 0.11 1411.4\n" +
                            "231.33 113.4 99.9 999.9\n" +
                            "1002.22 123.44 55.66 13.3\n" +
                            "4 4\n" +
                            "43.43 234.22 876.6 13.2\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            187d, 3978d, 7548d,
                            7752d, 5831d, 3774d,
                            16949d, 7752d, 7752d
                        }))
                    .setInput(
                        "2\n" +
                            "3 3\n" +
                            "11 234 444\n" +
                            "456 343 222\n" +
                            "997 456 456\n" +
                            "17\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            1123653d, 5933505d, 110927295d, 2365632d,
                            1505049d, 8619594d, 25665531d, 3833274d,
                            1366632d, 2598732d ,37999962d, 58303305d,
                            11068143d, 9781653d ,13666653d ,13443321d
                        }))
                    .setInput(
                        "2\n" +
                            "4 4\n" +
                            "10123 53455 999345 21312\n" +
                            "13559 77654 231221 34534\n" +
                            "12312 23412 342342 525255\n" +
                            "99713 88123 123123 121111\n" +
                            "111\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            45d, 113d, 11d, 266d,
                            84d, 139d, 29d, 229d,
                            45d, 49d, 35d, 100d,
                            15d, 86d, 0d, 281d ,
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "1 2 2 7\n" +
                            "3 3 4 5\n" +
                            "5 0 0 1\n" +
                            "0 1 0 8\n" +
                            "4 4\n" +
                            "9 8 7 13\n" +
                            "15 14 0 1\n" +
                            "3 7 2 3\n" +
                            "0 9 0 35\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            243d, 295d, 78d, 60d,
                            724d, 798d, 2063d, 175d
                        }))
                    .setInput(
                        "3\n" +
                            "2 3\n" +
                            "1 0 17\n" +
                            "15 19 7\n" +
                            "3 4\n" +
                            "5 6 78 9\n" +
                            "29 31 47 1\n" +
                            "14 17 0 3\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if you can do more than one operation in a loop",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d,
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 2 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 5 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 2 4\n" +
                            "4 6 6\n" +
                            "7 7 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 5 4\n" +
                            "4 6 6\n" +
                            "7 7 1.0\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "3\n" +
                            "4 4\n" +
                            "6 5 4 2\n" +
                            "8 7 6 6\n" +
                            "1 0 0 5.0\n" +
                            "9 2 8 8\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "4\n" +
                            "4 4\n" +
                            "8 8 2 9\n" +
                            "5 0 0 1\n" +
                            "6 6 7 8.0\n" +
                            "2 4 5 6\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            31d
                        }))
                    .setInput(
                        "5\n" +
                            "3 3\n" +
                            "1 2 3\n" +
                            "4 5 7\n" +
                            "10 22 23\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            45.2197d
                        }))
                    .setInput(
                        "5\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0")
            );
        }


        @Override
        public CheckResult check(String reply, TestClue clue) {

            try {

                String[] strNumbers = reply.lines()
                    .filter(line -> {
                        line = line.strip();
                        if (line.length() == 0) {
                            return false;
                        }
                        for (char c : line.toCharArray()) {
                            if (!(c == ' ' ||
                                c >= '0' && c <= '9' ||
                                c == '.' ||
                                c == '-' || c == '+' ||
                                c == 'e' || c == 'E')) {
                                return false;
                            }
                        }
                        return true;
                    }).reduce("", (a, b) -> a + " " + b)
                    .strip().split("\\s+");

                double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();

                double[] expected =
                    clue.answers.stream()
                        .mapToDouble(e -> e)
                        .toArray();
                if (actual.length != expected.length) {
                    return new CheckResult(false, clue.feedback);
                }

                for (int i = 0; i < actual.length; i++) {
                    if (abs(actual[i] - expected[i]) > 0.01) {
                        return new CheckResult(false, clue.feedback);
                    }
                }
            }
            catch (Exception ex) {
                return new CheckResult(false, "Can't check the answer");
            }

            return CheckResult.correct();

        }

    }
  learner_created: false
- name: src/processor/UserIO.java
  visible: true
  text: |
    package processor;

    import java.util.Arrays;
    import java.util.Map;
    import java.util.Scanner;
    import java.util.function.Function;

    class UserIO {

        private static final Scanner SCANNER = new Scanner(System.in);
        private static final String[] ordinals = {"", "first ", "second "};
        private final static Runnable noAction = () -> {};
        private final static Function<double[][], double[][]> noTransposeAction = m -> m;

        private final Map<Integer, Runnable> actions = Map.of(
                1, this::matrixAddition,
                2, this::matrixScalarMultiplication,
                3, this::matrixMatrixMultiplication,
                4, this::transpositionMenu
        );
        private static final Map<Integer, Function<double[][], double[][]>> transposeActions = Map.of(
                1, MatrixProcessor::mainDiagTransposition,
                2, MatrixProcessor::secDiagonalTransposition,
                3, MatrixProcessor::vertMirrorTransposition,
                4, MatrixProcessor::horzMirrorTransposition
        );
        String result = "";

        void mainLoop() {
            int choice = -1;
            while (choice != 0) {
                runAction(choice);
                showResult();
                showMainMenu();
                choice = readInt();
            }
        }

        private void runAction(int choice) {
            actions.getOrDefault(choice, noAction).run();
        }

        private void showResult() {
            if (!result.isEmpty()) {
                System.out.println(result);
                ;
            }
        }

        private void showMainMenu() {
            System.out.print("1. Add matrices\n2. Multiply matrix by a constant\n" +
                                     "3. Multiply matrices\n4. Transpose matrix\n0. Exit\nYour choice: ");
        }

        private void matrixAddition() {
            var m1 = inputMatrix(1);
            var m2 = inputMatrix(2);
            result = MatrixProcessor.checkSizesForAddition(m1, m2)
                    ? matrixToString(MatrixProcessor.addMatrices(m1, m2))
                    : "The operation cannot be performed.\n";
        }

        private void matrixScalarMultiplication() {
            var m = inputMatrix(0);
            System.out.print("Enter constant: ");
            double scalar = readDouble();
            result = matrixToString(MatrixProcessor.scaleMatrix(m, scalar));
        }

        private void matrixMatrixMultiplication() {
            var m1 = inputMatrix(1);
            var m2 = inputMatrix(2);
            result = MatrixProcessor.checkSizesForMultiplication(m1, m2)
                    ? matrixToString(MatrixProcessor.multiplyMatrices(m1, m2))
                    : "The operation cannot be performed.\n";
        }

        private void transpositionMenu() {
            showTranspositionMenu();
            int choice = readInt();
            double[][] m = inputMatrix(0);
            result = MatrixProcessor.checkSizesForTransposition(m)
                    ? matrixToString(transposeActions.getOrDefault(choice, noTransposeAction).apply(m))
                    : "The operation cannot be performed.\n";
        }

        private void showTranspositionMenu() {
            System.out.print("\n1. Main diagonal\n2. Side diagonal\n3. Vertical line\n" +
                                       "4. Horizontal line\nYour choice: ");
        }

        private double[][] inputMatrix(int ordIndex) {
            System.out.printf("Enter size of %smatrix: ", ordinals[ordIndex]);
            int rows = readIntRow()[0];
            double[][] mtx = new double[rows][];
            System.out.printf("Enter %smatrix:%n", ordinals[ordIndex]);
            for (int i = 0; i < rows; i++) {
                mtx[i] = readDoubleRow();
            }
            return mtx;
        }

        static int readInt() {
            return Integer.parseInt(SCANNER.nextLine());
        }

        static double readDouble() {
            return Double.parseDouble(SCANNER.nextLine());
        }

        static int[] readIntRow() {
            return Arrays.stream(SCANNER.nextLine().split("\\s+"))
                    .mapToInt(Integer::parseInt).toArray();
        }

        static double[] readDoubleRow() {
            return Arrays.stream(SCANNER.nextLine().split("\\s+"))
                    .mapToDouble(Double::parseDouble).toArray();
        }

        static String matrixToString(double[][] mtx) {
            StringBuilder sb = new StringBuilder("The result is:\n");
            for (double[] row : mtx) {
                for (double value : row) {
                    sb.append(value).append(' ');
                }
                sb.setLength(sb.length() - 1);
                sb.append('\n');
            }
            return sb.toString();
        }
    }
  learner_created: true
- name: src/processor/MatrixProcessor.java
  visible: true
  text: |
    package processor;

    import java.util.Arrays;

    class MatrixProcessor {

        public static boolean checkSizesForAddition(double[][] m1, double[][] m2) {
            return m1.length == m2.length && m1[0].length == m2[0].length;
        }

        public static boolean checkSizesForMultiplication(double[][] m1, double[][] m2) {
            return m1[0].length == m2.length;
        }

        public static boolean checkSizesForTransposition(double[][] m) {
            return m.length == m[0].length;
        }

        public static double[][] addMatrices(double[][] m1, double[][] m2) {
            final int rows = m1.length;
            final int cols = m1[0].length;
            double[][] sum = new double[rows][cols];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    sum[i][j] = m1[i][j] + m2[i][j];
                }
            }
            return sum;
        }

        public static double[][] scaleMatrix(double[][] m, double scalar) {
            return Arrays.stream(m)
                    .map(row -> Arrays.stream(row)
                            .map(v -> v * scalar)
                            .toArray())
                    .toArray(double[][]::new);
        }

        public static double[][] multiplyMatrices(double[][] m1, double[][] m2) {
            final int rows = m1.length;
            final int cols = m2[0].length;
            final int commonSize = m2.length;
            double[][] multi = new double[rows][cols];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    for (int k = 0; k < commonSize; k++) {
                        multi[i][j] += m1[i][k] * m2[k][j];
                    }
                }
            }
            return multi;
        }

        public static double[][] mainDiagTransposition(double[][] m) {
            double temp;
            for (int i = 0; i < m.length - 1; i++) {
                for (int j = i; j < m.length; j++) {
                    temp = m[i][j];
                    m[i][j] = m[j][i];
                    m[j][i] = temp;
                }
            }
            return m;
        }

        public static double[][] secDiagonalTransposition(double[][] m) {
            double temp;
            for (int row = 0, col = m.length - 1; row < m.length - 1; row++, col--) {
                for (int row2 = row + 1, col2 = col - 1; col2 >= 0; row2++, col2--) {
                    temp = m[row][col2];
                    m[row][col2] = m[row2][col];
                    m[row2][col] = temp;
                }
            }
            return m;
        }

        public static double[][] vertMirrorTransposition(double[][] m) {
            double temp;
            int center = m.length / 2;
            for (int i = 0; i < m.length; i++) {
                for (int j = 0, j2 = m.length - 1; j < center; j++, j2--) {
                    temp = m[i][j];
                    m[i][j] = m[i][j2];
                    m[i][j2] = temp;
                }
            }
            return m;
        }

        public static double[][] horzMirrorTransposition(double[][] m) {
            double temp;
            int center = m.length / 2;
            for (int j = 0; j < m.length; j++) {
                for (int i = 0, i2 = m.length - 1; i < center; i++, i2--) {
                    temp = m[i][j];
                    m[i][j] = m[i2][j];
                    m[i2][j] = temp;
                }
            }
            return m;
        }
    }
  learner_created: true
- name: src/processor/MatrixDeterminant.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/60/stages/327/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 22 Mar 2021 23:21:54 UTC
record: -1
